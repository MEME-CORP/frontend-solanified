/**
 * SOLANAFIED - DEVELOPMENT SERVER
 * 
 * A simple Node.js server that:
 * 1. Loads environment variables from .env file
 * 2. Serves static files with proper CORS headers
 * 3. Provides environment variables to the frontend
 * 4. Enables hot reloading for development
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

// Try to load dotenv if available
try {
  require('dotenv').config();
  console.log('‚úÖ Environment variables loaded from .env file');
} catch (error) {
  console.log('‚ö†Ô∏è  dotenv not installed. Install with: npm install dotenv');
  console.log('   Environment variables will be loaded from system environment');
}

// Server configuration
const PORT = process.env.PORT || 8000;
const HOST = process.env.HOST || 'localhost';

// MIME types for different file extensions
const MIME_TYPES = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.woff': 'font/woff',
  '.woff2': 'font/woff2',
  '.ttf': 'font/ttf',
  '.eot': 'application/vnd.ms-fontobject'
};

/**
 * Get MIME type for file extension
 */
function getMimeType(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  return MIME_TYPES[ext] || 'application/octet-stream';
}

/**
 * Serve static files
 */
function serveStaticFile(filePath, response) {
  fs.readFile(filePath, (error, data) => {
    if (error) {
      if (error.code === 'ENOENT') {
        response.writeHead(404, { 'Content-Type': 'text/html' });
        response.end(`
          <!DOCTYPE html>
          <html>
            <head><title>404 - File Not Found</title></head>
            <body>
              <h1>404 - File Not Found</h1>
              <p>The requested file <code>${filePath}</code> was not found.</p>
              <a href="/">‚Üê Back to Home</a>
            </body>
          </html>
        `);
      } else {
        response.writeHead(500, { 'Content-Type': 'text/plain' });
        response.end('Internal Server Error');
      }
      return;
    }

    const mimeType = getMimeType(filePath);
    response.writeHead(200, {
      'Content-Type': mimeType,
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Cache-Control': 'no-cache' // Disable caching for development
    });
    response.end(data);
  });
}

/**
 * Serve environment configuration as JavaScript
 */
function serveEnvironmentConfig(response) {
  const envConfig = {
    SUPABASE_URL: process.env.SUPABASE_URL || '',
    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || '',
    SOLANA_RPC_ENDPOINT: process.env.SOLANA_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com',
    NODE_ENV: process.env.NODE_ENV || 'development',
    DEBUG: process.env.DEBUG === 'true'
  };

  // Generate JavaScript that sets global variables
  const jsContent = `
// Environment Configuration
// This file is automatically generated by the server
window.ENV = ${JSON.stringify(envConfig, null, 2)};

console.log('üåç Environment configuration loaded:', window.ENV.NODE_ENV);

// Validate required environment variables
if (!window.ENV.SUPABASE_URL || !window.ENV.SUPABASE_ANON_KEY) {
  console.warn('‚ö†Ô∏è  Missing Supabase credentials. Please check your .env file.');
  console.warn('   Copy env.example to .env and add your Supabase credentials.');
}

if (window.ENV.SUPABASE_URL === 'https://your-project-id.supabase.co') {
  console.warn('‚ö†Ô∏è  Using example Supabase URL. Please update your .env file with actual credentials.');
}
  `.trim();

  response.writeHead(200, {
    'Content-Type': 'application/javascript',
    'Access-Control-Allow-Origin': '*',
    'Cache-Control': 'no-cache'
  });
  response.end(jsContent);
}

/**
 * Handle HTTP requests
 */
function handleRequest(request, response) {
  const parsedUrl = url.parse(request.url, true);
  let pathname = parsedUrl.pathname;

  // Handle CORS preflight requests
  if (request.method === 'OPTIONS') {
    response.writeHead(200, {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    });
    response.end();
    return;
  }

  console.log(`${request.method} ${pathname}`);

  // Serve environment configuration
  if (pathname === '/env.js') {
    serveEnvironmentConfig(response);
    return;
  }

  // Default to index.html for root path
  if (pathname === '/') {
    pathname = '/index.html';
  }

  // Construct file path
  const filePath = path.join(__dirname, pathname);

  // Security check: ensure file is within current directory
  const resolvedPath = path.resolve(filePath);
  const rootPath = path.resolve(__dirname);
  
  if (!resolvedPath.startsWith(rootPath)) {
    response.writeHead(403, { 'Content-Type': 'text/plain' });
    response.end('Access Denied');
    return;
  }

  // Check if file exists
  fs.stat(filePath, (error, stats) => {
    if (error || !stats.isFile()) {
      response.writeHead(404, { 'Content-Type': 'text/html' });
      response.end(`
        <!DOCTYPE html>
        <html>
          <head><title>404 - File Not Found</title></head>
          <body>
            <h1>404 - File Not Found</h1>
            <p>The requested file was not found.</p>
            <a href="/">‚Üê Back to Home</a>
          </body>
        </html>
      `);
      return;
    }

    serveStaticFile(filePath, response);
  });
}

// Create and start server
const server = http.createServer(handleRequest);

server.listen(PORT, HOST, () => {
  console.log('üöÄ Solanafied Development Server Started');
  console.log(`üìç Server running at: http://${HOST}:${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìÅ Serving files from: ${__dirname}`);
  console.log('');
  console.log('üìã Available endpoints:');
  console.log(`   ‚Ä¢ http://${HOST}:${PORT}/           - Main application`);
  console.log(`   ‚Ä¢ http://${HOST}:${PORT}/env.js     - Environment configuration`);
  console.log('');
  console.log('üîß To stop the server, press Ctrl+C');
  console.log('');

  // Validate environment variables
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    console.log('‚ö†Ô∏è  WARNING: Missing Supabase credentials');
    console.log('   Please create a .env file with your Supabase credentials');
    console.log('   Copy env.example to .env and update the values');
    console.log('');
  }

  if (process.env.SUPABASE_URL === 'https://your-project-id.supabase.co') {
    console.log('‚ö†Ô∏è  WARNING: Using example Supabase URL');
    console.log('   Please update your .env file with actual credentials');
    console.log('');
  }
});

// Handle server errors
server.on('error', (error) => {
  if (error.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${PORT} is already in use`);
    console.error('   Try using a different port: PORT=3000 node server.js');
  } else {
    console.error('‚ùå Server error:', error);
  }
  process.exit(1);
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down server...');
  server.close(() => {
    console.log('‚úÖ Server stopped');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('\nüõë Received SIGTERM, shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server stopped');
    process.exit(0);
  });
});
